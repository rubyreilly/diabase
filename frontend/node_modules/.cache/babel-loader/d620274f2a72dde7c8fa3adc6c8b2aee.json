{"ast":null,"code":"import _objectSpread from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  user: 1,\n  insulins: [],\n  selectedInsulin: 4\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_INSULINS\":\n      {\n        return _objectSpread({}, state, {\n          insulins: action.payload\n        });\n      }\n\n    case \"SELECT_INSULIN\":\n      {\n        return _objectSpread({}, state, {\n          selectedInsulin: action.payload\n        });\n      }\n\n    case \"ADD_ENTRY\":\n      {\n        var insulin = state.insulins.find(function (insulin) {\n          return insulin.id === action.payload.insulin_id;\n        }); // console.log(insulin)\n\n        var insulinDataCopy = insulin.all_associated_entries;\n        console.log(insulinDataCopy); // const newEntryData = [...insulin.all_associated_entries, action.payload]\n        // const insulinDataCopy = {...insulin, [...insulin.all_associated_entries, action.payload]}\n        // return {...state, insulins:[...state.insulins, insulinDataCopy]}\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/src/Redux/reducer.js"],"names":["initialState","user","insulins","selectedInsulin","reducer","state","action","type","payload","insulin","find","id","insulin_id","insulinDataCopy","all_associated_entries","console","log"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,CADc;AAEnBC,EAAAA,QAAQ,EAAC,EAFU;AAGnBC,EAAAA,eAAe,EAAE;AAHE,CAArB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBL,YAAwB;AAAA,MAAVM,MAAU;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,iCAAWF,KAAX;AAAkBH,UAAAA,QAAQ,EAACI,MAAM,CAACE;AAAlC;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,iCAAWH,KAAX;AAAkBF,UAAAA,eAAe,EAAEG,MAAM,CAACE;AAA1C;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB,YAAMC,OAAO,GAAGJ,KAAK,CAACH,QAAN,CAAeQ,IAAf,CAAoB,UAACD,OAAD;AAAA,iBAAYA,OAAO,CAACE,EAAR,KAAcL,MAAM,CAACE,OAAP,CAAeI,UAAzC;AAAA,SAApB,CAAhB,CADgB,CAEhB;;AACA,YAAMC,eAAe,GAAGJ,OAAO,CAACK,sBAAhC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAJgB,CAKhB;AACA;AACA;AAED;;AAED;AACE,aAAOR,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,SAAQD,OAAR","sourcesContent":["const initialState = {\n  user:1,\n  insulins:[],\n  selectedInsulin: 4\n}\n\nconst reducer = (state = initialState, action) =>{\n  switch (action.type){\n    case(\"GET_INSULINS\"):{\n      return {...state, insulins:action.payload}\n    }\n    case(\"SELECT_INSULIN\"):{\n      return {...state, selectedInsulin: action.payload}\n    }\n    case(\"ADD_ENTRY\"):{\n      const insulin = state.insulins.find((insulin)=> insulin.id ===action.payload.insulin_id)\n      // console.log(insulin)\n      const insulinDataCopy = insulin.all_associated_entries\n      console.log(insulinDataCopy)\n      // const newEntryData = [...insulin.all_associated_entries, action.payload]\n      // const insulinDataCopy = {...insulin, [...insulin.all_associated_entries, action.payload]}\n      // return {...state, insulins:[...state.insulins, insulinDataCopy]}\n\n    }\n\n    default:\n      return state\n  }\n}\n\nexport {reducer}\n"]},"metadata":{},"sourceType":"module"}