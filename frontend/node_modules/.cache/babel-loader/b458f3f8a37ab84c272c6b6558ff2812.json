{"ast":null,"code":"import _toConsumableArray from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  auth: {\n    currentUser: {\n      id: ''\n    }\n  },\n  insulins: [],\n  selectedInsulin: ''\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case(\"GET_USERS\"):{\n    //   return {...state, users:action.payload}\n    // }\n    case \"SET_USER\":\n      {\n        console.log(action.payload);\n        var currentUser = {\n          currentUser: action.payload.id // const userInsulins = {insulins: action.payload.insulins_info}\n          // const defaultSelectedInsulin= {selectedInsulin: action.payload.insulins_info[0].id }\n\n        };\n        return _objectSpread({}, state, {\n          auth: currentUser,\n          insulins: action.payload.insulins_info,\n          selectedInsulin: action.payload.insulins_info[0].id\n        });\n      }\n\n    case \"ADD_USER\":\n      {\n        var newUsers = _toConsumableArray(state.users).concat([action.payload]);\n\n        return _objectSpread({}, state, {\n          users: newUsers\n        });\n      }\n    // case(\"GET_INSULINS\"):{\n    //   return {...state, insulins:action.payload}\n    // }\n\n    case \"SELECT_INSULIN\":\n      {\n        return _objectSpread({}, state, {\n          selectedInsulin: action.payload\n        });\n      }\n\n    case \"REMOVE_INSULIN\":\n      {\n        var newInsulins = _toConsumableArray(state.insulins).filter(function (insulin) {\n          return insulin !== action.payload;\n        });\n\n        return _objectSpread({}, state, {\n          insulins: newInsulins\n        });\n      }\n\n    case \"ADD_INSULIN\":\n      {\n        var _newInsulins = _toConsumableArray(state.insulins).concat([action.payload]);\n\n        return _objectSpread({}, state, {\n          insulins: _newInsulins\n        });\n      }\n\n    case \"REMOVE_ENTRY\":\n      {\n        var _newInsulins2 = _toConsumableArray(state.insulins).map(function (insulin) {\n          if (insulin.id === action.payload.insulin_id) {\n            var newEntries = _toConsumableArray(insulin.all_associated_entries).filter(function (entry) {\n              return entry !== action.payload;\n            });\n\n            return _objectSpread({}, insulin, {\n              all_associated_entries: newEntries\n            });\n          } else {\n            return _objectSpread({}, insulin);\n          }\n        });\n\n        return _objectSpread({}, state, {\n          insulins: _newInsulins2\n        });\n      }\n\n    case \"ADD_ENTRY\":\n      {\n        var _newInsulins3 = _toConsumableArray(state.insulins).map(function (insulin) {\n          if (insulin.id === action.payload.insulin_id) {\n            var newEntries = [action.payload].concat(_toConsumableArray(insulin.all_associated_entries));\n            return _objectSpread({}, insulin, {\n              all_associated_entries: newEntries\n            });\n          } else {\n            return _objectSpread({}, insulin);\n          }\n        });\n\n        return _objectSpread({}, state, {\n          insulins: _newInsulins3\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/src/Redux/reducer.js"],"names":["initialState","auth","currentUser","id","insulins","selectedInsulin","reducer","state","action","type","console","log","payload","insulins_info","newUsers","users","newInsulins","filter","insulin","map","insulin_id","newEntries","all_associated_entries","entry"],"mappings":";;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,WAAW,EAAE;AAACC,MAAAA,EAAE,EAAC;AAAJ;AAAf,GADa;AAEnBC,EAAAA,QAAQ,EAAC,EAFU;AAGnBC,EAAAA,eAAe,EAAE;AAHE,CAArB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBP,YAAwB;AAAA,MAAVQ,MAAU;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AAIE;AACA;AACA;AACA,SAAK,UAAL;AAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,YAAMV,WAAW,GAAG;AAAEA,UAAAA,WAAW,EAAEM,MAAM,CAACI,OAAP,CAAeT,EAA9B,CACpB;AACA;;AAFoB,SAApB;AAGA,iCAAWI,KAAX;AACEN,UAAAA,IAAI,EAACC,WADP;AAEEE,UAAAA,QAAQ,EAAEI,MAAM,CAACI,OAAP,CAAeC,aAF3B;AAGER,UAAAA,eAAe,EAAEG,MAAM,CAACI,OAAP,CAAeC,aAAf,CAA6B,CAA7B,EAAgCV;AAHnD;AAMD;;AACD,SAAK,UAAL;AAAiB;AACf,YAAMW,QAAQ,sBAAOP,KAAK,CAACQ,KAAb,UAAoBP,MAAM,CAACI,OAA3B,EAAd;;AACA,iCAAWL,KAAX;AAAkBQ,UAAAA,KAAK,EAAED;AAAzB;AACD;AAID;AACA;AACA;;AACA,SAAK,gBAAL;AAAuB;AACrB,iCAAWP,KAAX;AAAkBF,UAAAA,eAAe,EAAEG,MAAM,CAACI;AAA1C;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,YAAMI,WAAW,GAAG,mBAAIT,KAAK,CAACH,QAAV,EAAoBa,MAApB,CAA2B,UAACC,OAAD,EAAW;AACxD,iBAAOA,OAAO,KAAKV,MAAM,CAACI,OAA1B;AACG,SAFe,CAApB;;AAGA,iCAAWL,KAAX;AAAkBH,UAAAA,QAAQ,EAAEY;AAA5B;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB,YAAMA,YAAW,sBAAOT,KAAK,CAACH,QAAb,UAAuBI,MAAM,CAACI,OAA9B,EAAjB;;AACA,iCAAWL,KAAX;AAAkBH,UAAAA,QAAQ,EAAEY;AAA5B;AACD;;AAKD,SAAK,cAAL;AAAqB;AACnB,YAAMA,aAAW,GAAG,mBAAIT,KAAK,CAACH,QAAV,EAAoBe,GAApB,CAAwB,UAACD,OAAD,EAAW;AACrD,cAAIA,OAAO,CAACf,EAAR,KAAeK,MAAM,CAACI,OAAP,CAAeQ,UAAlC,EAA6C;AAC3C,gBAAMC,UAAU,GAAG,mBAAIH,OAAO,CAACI,sBAAZ,EAAoCL,MAApC,CAA2C,UAACM,KAAD,EAAS;AACrE,qBAAOA,KAAK,KAAKf,MAAM,CAACI,OAAxB;AACD,aAFkB,CAAnB;;AAGA,qCAAWM,OAAX;AAAoBI,cAAAA,sBAAsB,EAAED;AAA5C;AACD,WALD,MAKK;AACH,qCAAWH,OAAX;AACD;AACF,SATmB,CAApB;;AAWA,iCAAWX,KAAX;AAAkBH,UAAAA,QAAQ,EAAEY;AAA5B;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB,YAAMA,aAAW,GAAG,mBAAIT,KAAK,CAACH,QAAV,EAAoBe,GAApB,CAAwB,UAACD,OAAD,EAAW;AACrD,cAAIA,OAAO,CAACf,EAAR,KAAeK,MAAM,CAACI,OAAP,CAAeQ,UAAlC,EAA6C;AAC3C,gBAAMC,UAAU,IAAIb,MAAM,CAACI,OAAX,4BAAsBM,OAAO,CAACI,sBAA9B,EAAhB;AACA,qCAAWJ,OAAX;AAAmBI,cAAAA,sBAAsB,EAAED;AAA3C;AACD,WAHD,MAGK;AACH,qCAAWH,OAAX;AACD;AACF,SAPmB,CAApB;;AASA,iCAAWX,KAAX;AAAkBH,UAAAA,QAAQ,EAAEY;AAA5B;AACD;;AAID;AACE,aAAOT,KAAP;AA5EJ;AA8ED,CA/ED;;AAiFA,SAAQD,OAAR","sourcesContent":["const initialState = {\n  auth: { currentUser: {id:''} },\n  insulins:[],\n  selectedInsulin: ''\n}\n\nconst reducer = (state = initialState, action) =>{\n  switch (action.type){\n\n\n\n    // case(\"GET_USERS\"):{\n    //   return {...state, users:action.payload}\n    // }\n    case(\"SET_USER\"):{\n      console.log(action.payload)\n      const currentUser = { currentUser: action.payload.id }\n      // const userInsulins = {insulins: action.payload.insulins_info}\n      // const defaultSelectedInsulin= {selectedInsulin: action.payload.insulins_info[0].id }\n      return {...state,\n        auth:currentUser,\n        insulins: action.payload.insulins_info,\n        selectedInsulin: action.payload.insulins_info[0].id\n      }\n\n    }\n    case(\"ADD_USER\"):{\n      const newUsers = [...state.users, action.payload]\n      return {...state, users: newUsers}\n    }\n\n\n\n    // case(\"GET_INSULINS\"):{\n    //   return {...state, insulins:action.payload}\n    // }\n    case(\"SELECT_INSULIN\"):{\n      return {...state, selectedInsulin: action.payload}\n    }\n    case(\"REMOVE_INSULIN\"):{\n      const newInsulins = [...state.insulins].filter((insulin)=>{\n        return insulin !== action.payload\n          })\n      return {...state, insulins: newInsulins}\n    }\n    case(\"ADD_INSULIN\"):{\n      const newInsulins = [...state.insulins, action.payload]\n      return {...state, insulins: newInsulins}\n    }\n\n\n\n\n    case(\"REMOVE_ENTRY\"):{\n      const newInsulins = [...state.insulins].map((insulin)=>{\n        if (insulin.id === action.payload.insulin_id){\n          const newEntries = [...insulin.all_associated_entries].filter((entry)=>{\n            return entry !== action.payload\n          })\n          return {...insulin, all_associated_entries: newEntries}\n        }else{\n          return {...insulin}\n        }\n      }\n    )\n      return {...state, insulins: newInsulins}\n    }\n    case(\"ADD_ENTRY\"):{\n      const newInsulins = [...state.insulins].map((insulin)=>{\n        if (insulin.id === action.payload.insulin_id){\n          const newEntries = [action.payload,...insulin.all_associated_entries]\n          return {...insulin,all_associated_entries: newEntries}\n        }else{\n          return {...insulin}\n        }\n      }\n    )\n      return {...state, insulins: newInsulins}\n    }\n\n\n\n    default:\n      return state\n  }\n}\n\nexport {reducer}\n"]},"metadata":{},"sourceType":"module"}