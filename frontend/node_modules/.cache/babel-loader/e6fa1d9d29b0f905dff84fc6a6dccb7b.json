{"ast":null,"code":"import _toConsumableArray from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  user: 1,\n  insulins: [],\n  selectedInsulin: 4\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_INSULINS\":\n      {\n        return _objectSpread({}, state, {\n          insulins: action.payload\n        });\n      }\n\n    case \"SELECT_INSULIN\":\n      {\n        return _objectSpread({}, state, {\n          selectedInsulin: action.payload\n        });\n      }\n\n    case \"ADD_ENTRY\":\n      {\n        var newInsulins = state.insulins.map(function (insulin) {\n          if (insulin.id === action.payload.insulin_id) {\n            console.log(insulins[indexOf(insulin)]);\n\n            var newData = _objectSpread({}, insulin, {\n              all_associated_entries: _toConsumableArray(insulin.all_associated_entries).concat([action.payload]) // return [...state.insulins, insulins[indexOf(insulin)]: newData]\n\n            });\n          } // console.log(insulin)\n          // const insulinEntriesCopy = [...insulin.all_associated_entries, action.payload]\n          // console.log(insulinNewData)\n          // const newEntryData = [...insulin.all_associated_entries, action.payload]\n          // const insulinDataCopy = {...insulin, [...insulin.all_associated_entries, action.payload]}\n\n        });\n        return _objectSpread({}, state, {\n          insulins: [newInsulins]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/src/Redux/reducer.js"],"names":["initialState","user","insulins","selectedInsulin","reducer","state","action","type","payload","newInsulins","map","insulin","id","insulin_id","console","log","indexOf","newData","all_associated_entries"],"mappings":";;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,CADc;AAEnBC,EAAAA,QAAQ,EAAC,EAFU;AAGnBC,EAAAA,eAAe,EAAE;AAHE,CAArB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBL,YAAwB;AAAA,MAAVM,MAAU;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,iCAAWF,KAAX;AAAkBH,UAAAA,QAAQ,EAACI,MAAM,CAACE;AAAlC;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,iCAAWH,KAAX;AAAkBF,UAAAA,eAAe,EAAEG,MAAM,CAACE;AAA1C;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB,YAAMC,WAAW,GAAGJ,KAAK,CAACH,QAAN,CAAeQ,GAAf,CAAmB,UAACC,OAAD,EAAW;AAChD,cAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAeK,UAAlC,EAA6C;AAC3CC,YAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,OAAO,CAACL,OAAD,CAAR,CAApB;;AACA,gBAAMM,OAAO,qBAAON,OAAP;AAAgBO,cAAAA,sBAAsB,qBAAMP,OAAO,CAACO,sBAAd,UAAsCZ,MAAM,CAACE,OAA7C,EAAtC,CACb;;AADa,cAAb;AAED,WAL+C,CAMlD;AACA;AAEA;AACA;AACA;;AAED,SAbqB,CAApB;AAcA,iCAAWH,KAAX;AAAkBH,UAAAA,QAAQ,EAAC,CAACO,WAAD;AAA3B;AAED;;AAED;AACE,aAAOJ,KAAP;AA3BJ;AA6BD,CA9BD;;AAgCA,SAAQD,OAAR","sourcesContent":["const initialState = {\n  user:1,\n  insulins:[],\n  selectedInsulin: 4\n}\n\nconst reducer = (state = initialState, action) =>{\n  switch (action.type){\n    case(\"GET_INSULINS\"):{\n      return {...state, insulins:action.payload}\n    }\n    case(\"SELECT_INSULIN\"):{\n      return {...state, selectedInsulin: action.payload}\n    }\n    case(\"ADD_ENTRY\"):{\n      const newInsulins = state.insulins.map((insulin)=>{\n        if (insulin.id === action.payload.insulin_id){\n          console.log(insulins[indexOf(insulin)])\n          const newData = {...insulin, all_associated_entries: [...insulin.all_associated_entries, action.payload]}\n          // return [...state.insulins, insulins[indexOf(insulin)]: newData]\n        }\n      // console.log(insulin)\n      // const insulinEntriesCopy = [...insulin.all_associated_entries, action.payload]\n\n      // console.log(insulinNewData)\n      // const newEntryData = [...insulin.all_associated_entries, action.payload]\n      // const insulinDataCopy = {...insulin, [...insulin.all_associated_entries, action.payload]}\n\n    })\n      return {...state, insulins:[newInsulins]}\n\n    }\n\n    default:\n      return state\n  }\n}\n\nexport {reducer}\n"]},"metadata":{},"sourceType":"module"}