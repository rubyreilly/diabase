{"ast":null,"code":"import _toConsumableArray from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  users: [],\n  user: 1,\n  insulins: [],\n  selectedInsulin: 4\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_INSULINS\":\n      {\n        return _objectSpread({}, state, {\n          insulins: action.payload\n        });\n      }\n\n    case \"SELECT_INSULIN\":\n      {\n        return _objectSpread({}, state, {\n          selectedInsulin: action.payload\n        });\n      }\n\n    case \"ADD_ENTRY\":\n      {\n        var newInsulins = _toConsumableArray(state.insulins).map(function (insulin) {\n          if (insulin.id === action.payload.insulin_id) {\n            var newEntries = [action.payload].concat(_toConsumableArray(insulin.all_associated_entries));\n            return _objectSpread({}, insulin, {\n              all_associated_entries: newEntries\n            });\n          } else {\n            return _objectSpread({}, insulin);\n          }\n        });\n\n        return _objectSpread({}, state, {\n          insulins: newInsulins\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["/Users/rubyreilly/dev/code/t1dlog/t1dlog_frontend/src/Redux/reducer.js"],"names":["initialState","users","user","insulins","selectedInsulin","reducer","state","action","type","payload","newInsulins","map","insulin","id","insulin_id","newEntries","all_associated_entries"],"mappings":";;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAC,EADa;AAEnBC,EAAAA,IAAI,EAAC,CAFc;AAGnBC,EAAAA,QAAQ,EAAC,EAHU;AAInBC,EAAAA,eAAe,EAAE;AAJE,CAArB;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBN,YAAwB;AAAA,MAAVO,MAAU;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,iCAAWF,KAAX;AAAkBH,UAAAA,QAAQ,EAACI,MAAM,CAACE;AAAlC;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,iCAAWH,KAAX;AAAkBF,UAAAA,eAAe,EAAEG,MAAM,CAACE;AAA1C;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB,YAAMC,WAAW,GAAG,mBAAIJ,KAAK,CAACH,QAAV,EAAoBQ,GAApB,CAAwB,UAACC,OAAD,EAAW;AACrD,cAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAeK,UAAlC,EAA6C;AAC3C,gBAAMC,UAAU,IAAIR,MAAM,CAACE,OAAX,4BAAsBG,OAAO,CAACI,sBAA9B,EAAhB;AACA,qCAAWJ,OAAX;AAAmBI,cAAAA,sBAAsB,EAAED;AAA3C;AACD,WAHD,MAGK;AACH,qCAAWH,OAAX;AACD;AACJ,SAPqB,CAApB;;AASA,iCAAWN,KAAX;AAAkBH,UAAAA,QAAQ,EAAEO;AAA5B;AAED;;AAED;AACE,aAAOJ,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,SAAQD,OAAR","sourcesContent":["const initialState = {\n  users:[],\n  user:1,\n  insulins:[],\n  selectedInsulin: 4\n}\n\nconst reducer = (state = initialState, action) =>{\n  switch (action.type){\n    case(\"GET_INSULINS\"):{\n      return {...state, insulins:action.payload}\n    }\n    case(\"SELECT_INSULIN\"):{\n      return {...state, selectedInsulin: action.payload}\n    }\n    case(\"ADD_ENTRY\"):{\n      const newInsulins = [...state.insulins].map((insulin)=>{\n        if (insulin.id === action.payload.insulin_id){\n          const newEntries = [action.payload,...insulin.all_associated_entries]\n          return {...insulin,all_associated_entries: newEntries}\n        }else{\n          return {...insulin}\n        }\n    })\n\n      return {...state, insulins: newInsulins}\n\n    }\n\n    default:\n      return state\n  }\n}\n\nexport {reducer}\n"]},"metadata":{},"sourceType":"module"}